// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_return_same_int
int rcpp_return_same_int(const int hello);
RcppExport SEXP _rrbgen_rcpp_return_same_int(SEXP helloSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type hello(helloSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_return_same_int(hello));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_raw_data_vector_for_probabilities
Rcpp::RawVector rcpp_make_raw_data_vector_for_probabilities(Rcpp::NumericMatrix& gp_sub, int B_bit_prob);
RcppExport SEXP _rrbgen_rcpp_make_raw_data_vector_for_probabilities(SEXP gp_subSEXP, SEXP B_bit_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type gp_sub(gp_subSEXP);
    Rcpp::traits::input_parameter< int >::type B_bit_prob(B_bit_probSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_raw_data_vector_for_probabilities(gp_sub, B_bit_prob));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_place_gp_t_into_output
void rcpp_place_gp_t_into_output(const Rcpp::NumericMatrix& gp_t, Rcpp::RawMatrix& to_out, const int i_sample, const int nSNPs, const int B_bit_prob);
RcppExport SEXP _rrbgen_rcpp_place_gp_t_into_output(SEXP gp_tSEXP, SEXP to_outSEXP, SEXP i_sampleSEXP, SEXP nSNPsSEXP, SEXP B_bit_probSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type gp_t(gp_tSEXP);
    Rcpp::traits::input_parameter< Rcpp::RawMatrix& >::type to_out(to_outSEXP);
    Rcpp::traits::input_parameter< const int >::type i_sample(i_sampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nSNPs(nSNPsSEXP);
    Rcpp::traits::input_parameter< const int >::type B_bit_prob(B_bit_probSEXP);
    rcpp_place_gp_t_into_output(gp_t, to_out, i_sample, nSNPs, B_bit_prob);
    return R_NilValue;
END_RCPP
}
// rcpp_convert_raw_probabilities_to_double_probabilities
Rcpp::NumericMatrix rcpp_convert_raw_probabilities_to_double_probabilities(const Rcpp::RawVector& data_raw_for_probs, int N, int B_bit_prob, Rcpp::LogicalVector& is_missing);
RcppExport SEXP _rrbgen_rcpp_convert_raw_probabilities_to_double_probabilities(SEXP data_raw_for_probsSEXP, SEXP NSEXP, SEXP B_bit_probSEXP, SEXP is_missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::RawVector& >::type data_raw_for_probs(data_raw_for_probsSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type B_bit_prob(B_bit_probSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector& >::type is_missing(is_missingSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_convert_raw_probabilities_to_double_probabilities(data_raw_for_probs, N, B_bit_prob, is_missing));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rrbgen_rcpp_return_same_int", (DL_FUNC) &_rrbgen_rcpp_return_same_int, 1},
    {"_rrbgen_rcpp_make_raw_data_vector_for_probabilities", (DL_FUNC) &_rrbgen_rcpp_make_raw_data_vector_for_probabilities, 2},
    {"_rrbgen_rcpp_place_gp_t_into_output", (DL_FUNC) &_rrbgen_rcpp_place_gp_t_into_output, 5},
    {"_rrbgen_rcpp_convert_raw_probabilities_to_double_probabilities", (DL_FUNC) &_rrbgen_rcpp_convert_raw_probabilities_to_double_probabilities, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_rrbgen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
