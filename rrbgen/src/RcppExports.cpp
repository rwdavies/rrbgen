// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_return_same_int
int rcpp_return_same_int(const int hello);
RcppExport SEXP _rrbgen_rcpp_return_same_int(SEXP helloSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type hello(helloSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_return_same_int(hello));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_make_raw_data_vector_for_probabilities
Rcpp::RawVector rcpp_make_raw_data_vector_for_probabilities(Rcpp::NumericMatrix gp_sub, int B_bit_prob);
RcppExport SEXP _rrbgen_rcpp_make_raw_data_vector_for_probabilities(SEXP gp_subSEXP, SEXP B_bit_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type gp_sub(gp_subSEXP);
    Rcpp::traits::input_parameter< int >::type B_bit_prob(B_bit_probSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_make_raw_data_vector_for_probabilities(gp_sub, B_bit_prob));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rrbgen_rcpp_return_same_int", (DL_FUNC) &_rrbgen_rcpp_return_same_int, 1},
    {"_rrbgen_rcpp_make_raw_data_vector_for_probabilities", (DL_FUNC) &_rrbgen_rcpp_make_raw_data_vector_for_probabilities, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rrbgen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
